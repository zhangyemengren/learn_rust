/// 1.RAII
/// Rust 中的变量不仅仅是在堆栈中保存数据：它们还拥有资源，例如Box<T> 拥有堆中的内存。
/// Rust 强制执行 RAII（资源获取即初始化），因此每当对象超出范围时，就会调用其析构函数并释放其拥有的资源。
/// 此行为可以防止资源泄漏错误，因此您永远不必手动释放内存或再次担心内存泄漏！下方是一个快速展示：
/// 2.析构函数
/// Rust 中析构函数的概念是通过 Drop 特征提供的。当资源超出范围时，将调用析构函数。
/// 不需要为每个类型实现此特征，仅当您需要自己的析构函数逻辑时才为您的类型实现它。
/// 运行以下示例以查看 Drop 特征的工作原理。当主函数中的变量超出范围时，将调用自定义析构函数。

fn create_box() {
    // 在堆上分配一个整数
    let _box1 = Box::new(3i32);

    // `_box1` 在这里被销毁，内存被释放
}

struct ToDrop;

impl Drop for ToDrop {
    fn drop(&mut self) {
        println!("ToDrop is being dropped");
    }
}

fn main() {
    // 在堆上分配一个整数
    let _box2 = Box::new(5i32);

    // 嵌套范围：
    {
        // 在堆上分配一个整数
        let _box3 = Box::new(4i32);

        // `_box3` 在这里被销毁，内存被释放
    }

    // 创建很多盒子只是为了好玩
    // 无需手动释放内存！
    for _ in 0u32..1_000 {
        create_box();
    }

    // `_box2` 在这里被销毁，内存被释放

    let _x = ToDrop;
    println!("Made a ToDrop!");
    // `_x` 在这里被销毁 并调用 `drop` 方法
}
