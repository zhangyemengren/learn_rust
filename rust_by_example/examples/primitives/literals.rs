/// 整数1、浮点数1.2、字符'a'、字符串"abc"、布尔值true 和单位类型()可以使用字面量来表达。
/// 或者，可以分别使用以下前缀表示法 0x、0o或0b 来表示法来表示十六进制、八进制或二进制整数。
/// 可以在数字文字中插入下划线以提高可读性，例如 1_000与 相同1000、0.000_001与0.000001相同。
/// Rust 还支持科学E 符号，例如1e6, 7.6e-4。关联类型是f64.
/// 我们需要告诉编译器我们使用的类型。现在，我们将使用u32后缀来指示字面量是无符号 32 位整数，并使用后缀i32来指示它是有符号 32 位整数。
/// Rust 中可用的运算符及其优先级与其他类似 C 的语言类似。
fn main() {
    // 整数加法
    println!("1 + 2 = {}", 1u32 + 2);

    // 整数减法
    println!("1 - 2 = {}", 1i32 - 2);

    // 溢出行为dev模式会报错，release模式不会
    // println!("1 - 2 = {}", 1u32 - 2);

    // 科学计数法
    println!("1e4 is {}, -2.5e-3 is {}", 1e4, -2.5e-3);

    // 短路布尔值
    println!("true AND false is {}", true && false);
    println!("true OR false is {}", true || false);
    println!("NOT true is {}", !true);

    // 位运算
    println!("0011 AND 0101 is {:04b}", 0b0011u32 & 0b0101);
    println!("0011 OR 0101 is {:04b}", 0b0011u32 | 0b0101);
    println!("0011 XOR 0101 is {:04b}", 0b0011u32 ^ 0b0101);
    println!("1 << 5 is {}", 1u32 << 5);
    println!("0x80 >> 2 is 0x{:x}", 0x80u32 >> 2);

    // 使用下划线增加可读性
    println!("One million is written as {}", 1_000_000u32);
}